---
en:
  expectation_Assigns_except: '%{binding} %{must} assign something distinct from %{target}'
  expectation_Assigns_like: '%{binding} %{must} assign something similar to %{target}'
  expectation_Assigns_named: '%{binding} %{must} assign %{target}'
  expectation_Assigns: '%{binding} %{must} perform assignments'
  expectation_Calls_except: '%{binding} %{must} delegate to something distinct from %{target}'
  expectation_Calls_like: '%{binding} %{must} delegate to something similar to %{target}'
  expectation_Calls_named: '%{binding} %{must} use %{target}'
  expectation_Calls: '%{binding} %{must} delegate'
  expectation_Declares_except: '%{binding} %{must} contain declarations distinct from %{target}'
  expectation_Declares_like: '%{binding} %{must} declare an identifier similar to %{target}'
  expectation_Declares_named: '%{binding} %{must} declare %{target}'
  expectation_Declares: '%{binding} %{must} contain declarations'
  expectation_DeclaresAttribute_except: '%{binding} %{must} declare attributes distinct from %{target}'
  expectation_DeclaresAttribute_like: '%{binding} %{must} declare an attribute similar to %{target}'
  expectation_DeclaresAttribute_named: '%{binding} %{must} declare an attribute %{target}'
  expectation_DeclaresAttribute: '%{binding} %{must} declare attributes'
  expectation_DeclaresClass_except: '%{binding} %{must} declare classes distinct from %{target}'
  expectation_DeclaresClass_like: '%{binding} %{must} declare a class similar to %{target}'
  expectation_DeclaresClass_named: '%{binding} %{must} declare a class %{target}'
  expectation_DeclaresClass: '%{binding} %{must} declare classes'
  expectation_DeclaresComputation_except: '%{binding} %{must} declare computations distinct from %{target}'
  expectation_DeclaresComputation_like: '%{binding} %{must} declare a computation similar to %{target}'
  expectation_DeclaresComputation_named: '%{binding} %{must} declare a computation %{target}'
  expectation_DeclaresComputation: '%{binding} %{must} declare computations'
  expectation_DeclaresComputationWithArity0_named: '%{target} %{must} have zero parameters'
  expectation_DeclaresComputationWithArity1_named: '%{target} %{must} have one parameter'
  expectation_DeclaresComputationWithArity2_named: '%{target} %{must} have 2 parameters'
  expectation_DeclaresComputationWithArity3_named: '%{target} %{must} have 3 parameters'
  expectation_DeclaresComputationWithArity4_named: '%{target} %{must} have 4 parameters'
  expectation_DeclaresComputationWithArity5_named: '%{target} %{must} have 5 parameters'
  expectation_DeclaresEntryPoint: '%{binding} %{must} declare an entry point'
  expectation_DeclaresEnumeration_except: '%{binding} %{must} declare enumerations distinct from %{target}'
  expectation_DeclaresEnumeration_like: '%{binding} %{must} declare an enumeration like %{target}'
  expectation_DeclaresEnumeration_named: '%{binding} %{must} declare an enumeration %{target}'
  expectation_DeclaresEnumeration: '%{binding} %{must} declare enumerations'
  expectation_DeclaresFact_except: '%{binding} %{must} declare facts distinct from %{target}'
  expectation_DeclaresFact_like: '%{binding} %{must} declare a fact similar to %{target}'
  expectation_DeclaresFact_named: '%{binding} %{must} declare a fact %{target}'
  expectation_DeclaresFact: '%{binding} %{must} declare facts'
  expectation_DeclaresFunction_except: '%{binding} %{must} declare functions distinct from %{target}'
  expectation_DeclaresFunction_like: '%{binding} %{must} declare a function similar to %{target}'
  expectation_DeclaresFunction_named: '%{binding} %{must} declare a function %{target}'
  expectation_DeclaresFunction: '%{binding} %{must} debe declare functions'
  expectation_DeclaresInterface_except: '%{binding} %{must} declare interfaces distinct from %{target}'
  expectation_DeclaresInterface_like: '%{binding} %{must} declare an interface like %{target}'
  expectation_DeclaresInterface_named: '%{binding} %{must} declare an interface %{target}'
  expectation_DeclaresInterface: '%{binding} %{must} declare interfaces'
  expectation_DeclaresMethod_except: '%{binding} %{must} declare methods distinct from %{target}'
  expectation_DeclaresMethod_like: '%{binding} %{must} declare a method similar to %{target}'
  expectation_DeclaresMethod_named: '%{binding} %{must} declare a method %{target}'
  expectation_DeclaresMethod: '%{binding} %{must} declare methods'
  expectation_DeclaresObject_except: '%{binding} %{must} declare objects distinct from %{target}'
  expectation_DeclaresObject_like: '%{binding} %{must} declare an object similar to %{target}'
  expectation_DeclaresObject_named: '%{binding} %{must} declare an object %{target}'
  expectation_DeclaresObject: '%{binding} %{must} declare objects'
  expectation_DeclaresPredicate_except: '%{binding} %{must} declare a predicate distinct from %{target}'
  expectation_DeclaresPredicate_like: '%{binding} %{must} declare a predicate similar to %{target}'
  expectation_DeclaresPredicate_named: '%{binding} %{must} declare predicates %{target}'
  expectation_DeclaresPredicate: '%{binding} %{must} declare predicates'
  expectation_DeclaresProcedure_except: '%{binding} %{must} declare procedures distinct from %{target}'
  expectation_DeclaresProcedure_like: '%{binding} %{must} declare a procedure similar to %{target}'
  expectation_DeclaresProcedure_named: '%{binding} %{must} declare a procedure %{target}'
  expectation_DeclaresProcedure: '%{binding} %{must} declare procedures'
  expectation_DeclaresRecursively_named: '%{target} %{must} declared recursively'
  expectation_DeclaresRule_except: '%{binding} %{must} declare rules distinct from %{target}'
  expectation_DeclaresRule_like: '%{binding} %{must} declare a rule similar to %{target}'
  expectation_DeclaresRule_named: '%{binding} %{must} declare a rule %{target}'
  expectation_DeclaresRule: '%{binding} %{must} debe declare rules'
  expectation_DeclaresStyles_except: '%{binding} %{must} declare style distinct from %{target}'
  expectation_DeclaresStyles_like: '%{binding} %{must} declare a style similar to %{target}'
  expectation_DeclaresStyles_named: '%{binding} %{must} declare a style %{target}'
  expectation_DeclaresStyles: '%{binding} %{must} declare styles'
  expectation_DeclaresTag_except: '%{binding} %{must} declare a tag distinct from %{target}'
  expectation_DeclaresTag_like: '%{binding} %{must} declare a tag similar to %{target}'
  expectation_DeclaresTag_named: '%{binding} %{must} declare a tag %{target}'
  expectation_DeclaresTag: '%{binding} %{must} declare a tag'
  expectation_DeclaresTypeAlias_except: '%{binding} %{must} declare type aliases distinct from %{target}'
  expectation_DeclaresTypeAlias_like: '%{binding} %{must} declare a type alias similar to %{target}'
  expectation_DeclaresTypeAlias_named: '%{binding} %{must} declare a type alias %{target}'
  expectation_DeclaresTypeAlias: '%{binding} %{must} declare type aliases'
  expectation_DeclaresTypeSignature_except: '%{binding} %{must} declare a type signature distinct from %{target}'
  expectation_DeclaresTypeSignature_like: '%{binding} %{must} declare a type signature for something like %{target}'
  expectation_DeclaresTypeSignature_named: '%{binding} %{must} declare a type signature %{target}'
  expectation_DeclaresTypeSignature: '%{binding} %{must} decarar type signatures'
  expectation_DeclaresVariable_except: '%{binding} %{must} declare variables distinct from %{target}'
  expectation_DeclaresVariable_like: '%{binding} %{must} declare a variable similar to %{target}'
  expectation_DeclaresVariable_named: '%{binding} %{must} declare a variable %{target}'
  expectation_DeclaresVariable: '%{binding} %{must} debe declare variables'
  expectation_DiscardsExceptions: '%{binding} is ignoring exceptions silently'
  expectation_DoesConsolePrint: '%{binding} is printing to the console'
  expectation_DoesNilTest: '%{binding} does <i>%{keyword_null}</i> tests'
  expectation_DoesNullTest: '%{binding} does <i>%{keyword_null}</i> tests'
  expectation_DoesTypeTest: '%{binding} string type tests'
  expectation_HasAssignmentReturn: '%{binding} returns the result of an assignment'
  expectation_HasCodeDuplication: '%{binding} has code duplication'
  expectation_HasEmptyIfBranches: '%{binding} has empty <i>%{keyword_if}</i> branches'
  expectation_HasMisspelledBindings: '%{binding} is misspelled'
  expectation_HasMisspelledIdentifiers: '%{binding} is misspelled'
  expectation_HasRedundantBooleanComparison: '%{binding} makes unnecesary boolean comparisons'
  expectation_HasRedundantGuards: '%{binding} has unnecessary guards'
  expectation_HasRedundantIf: '%{binding} has unnecessary <i>%{keyword_if}</i>s'
  expectation_HasRedundantLambda: '%{binding} has unnecessary lambdas'
  expectation_HasRedundantLocalVariableReturn: '%{binding} has unnecesary local variables; please try returning the expression directly'
  expectation_HasRedundantParameter: '%{binding} has unnecessary parameters, that can be removed using point-free'
  expectation_HasRedundantReduction: '%{binding} uses <i>%{keyword_is}</i>, but it does not artihmetic.'
  expectation_HasTooShortBindings: '%{binding} is a too short identifier'
  expectation_HasUnreachableCode: '%{binding} has unreachable code.'
  expectation_HasWrongCaseBindings: '%{binding} does not honor case conventions'
  expectation_Implements_except: '%{binding} %{must} implement interfaces distinct from %{target}'
  expectation_Implements_like: '%{binding} %{must} implement interfaces like %{target}'
  expectation_Implements_named: '%{binding} %{must} implement %{target}'
  expectation_Implements: '%{binding} %{must} implement intefaces'
  expectation_Instantiates_except: '%{binding} %{must} instantiate classes distinct from %{target}'
  expectation_Instantiates_like: '%{binding} %{must} instantiate classes like %{target}'
  expectation_Instantiates_named: '%{binding} %{must} instantiate %{target}'
  expectation_Instantiates: '%{binding} %{must} instantiate objects'
  expectation_IsLongCode: '%{binding} is too long'
  expectation_must_not: must not
  expectation_must: must
  expectation_Raises_except: '%{binding} %{must} throw exceptions distinct from %{target}'
  expectation_Raises_like: '%{binding} %{must} throw exceptions like %{target}'
  expectation_Raises_named: '%{binding} %{must} throw %{target}'
  expectation_Raises: '%{binding} %{must} throw exceptions'
  expectation_ReturnsNil: '%{binding} retuns <i>%{keyword_null}</i>, which is a bad practice'
  expectation_ReturnsNull: '%{binding} retuns <i>%{keyword_null}</i>, which is a bad practice'
  expectation_solution: solution
  expectation_SourceContains_named: 'solution %{must} use %{target}'
  expectation_SourceEquals_named: 'solution %{must} be equal to %{target}'
  expectation_SourceEqualsIgnoreSpaces_named: 'solution %{must} be equal to %{target}'
  expectation_SourceRepeats_named: 'solution %{must} use %{target} more than one time'
  expectation_TypesAs_named: '%{binding} %{must} type as %{target}'
  expectation_TypesAs: '%{binding} %{must} type'
  expectation_TypesReturnAs_named: '%{binding} %{must} type its return value as %{target}'
  expectation_TypesReturnAs: '%{binding} %{must} type its return value'
  expectation_Uses_except: '%{binding} %{must} delegate to something distinct from %{target}'
  expectation_Uses_like: '%{binding} %{must} delegate to something similar to %{target}'
  expectation_Uses_named: '%{binding} %{must} use %{target}'
  expectation_Uses: '%{binding} %{must} delegate'
  expectation_UsesAnonymousVariable: '%{binding} %{must} use an annonymous variable'
  expectation_UsesComposition: '%{binding} %{must} use composition'
  expectation_UsesComprehension: '%{binding} %{must} use comprehensions'
  expectation_UsesConditional: '%{binding} %{must} use conditionals'
  expectation_UsesCut: '%{binding} uses <i>!</li> operator, which is a bad practice'
  expectation_UsesDyamicPolymorphism: '%{binding} %{must} use polymorphism'
  expectation_UsesDynamicMethodOverload: '%{binding} %{must} use overload'
  expectation_UsesFail: '%{binding} uses <i>%{keyword_fail}</li>, which is a bad practice'
  expectation_UsesFindall: '%{binding} %{must} use <i>%{keyword_findall}</i>'
  expectation_UsesForall: '%{binding} %{must} use <i>%{keyword_forall}</i>'
  expectation_UsesForeach: '%{binding} %{must} use <i>%{keyword_foreach}</i>'
  expectation_UsesGuards: '%{binding} %{must} use guards'
  expectation_UsesIf: '%{binding} %{must} use <i>%{keyword_if}</i>'
  expectation_UsesLambda: '%{binding} %{must} use lambda expressions'
  expectation_UsesLoop: '%{binding} %{must} use a loop'
  expectation_UsesNot: '%{binding} %{must} use not'
  expectation_UsesObjectComposition: '%{binding} %{must} use composition'
  expectation_UsesPatternMatching: '%{binding} %{must} use pattern matching'
  expectation_UsesRepeat: '%{binding} %{must} use <i>%{keyword_repeat}</i>'
  expectation_UsesRepeatOf: '%{binding} %{must} use <i>%{keyword_repeat}</i>'
  expectation_UsesStaticMethodOverload: '%{binding} %{must} use overload'
  expectation_UsesStaticPolymorphism: '%{binding} %{must} use polymorphism'
  expectation_UsesSwitch: '%{binding} %{must} use a <i>%{keyword_switch}</i>'
  expectation_UsesTemplateMethod: '%{binding} %{must} use a template method'
  expectation_UsesUnificationOperator: '%{binding} uses the unification operator (=)'
  expectation_UsesWhile: '%{binding} %{must} use <i>%{keyword_while}</i>'
