---
en:
  mumukit:
    expectation:
      must_not: must not
      must: must
      solution: solution
    inspection:
      Assigns_except: '%{binding} %{must} assign something distinct from %{target}'
      Assigns_like: '%{binding} %{must} assign something similar to %{target}'
      Assigns_named: '%{binding} %{must} assign %{target}'
      Assigns: '%{binding} %{must} perform assignments'
      Calls_except: '%{binding} %{must} delegate to something distinct from %{target}'
      Calls_like: '%{binding} %{must} delegate to something similar to %{target}'
      Calls_named: '%{binding} %{must} use %{target}'
      Calls: '%{binding} %{must} delegate'
      Declares_except: '%{binding} %{must} contain declarations distinct from %{target}'
      Declares_like: '%{binding} %{must} declare an identifier similar to %{target}'
      Declares_named: '%{binding} %{must} declare %{target}'
      Declares: '%{binding} %{must} contain declarations'
      DeclaresAttribute_except: '%{binding} %{must} declare attributes distinct from %{target}'
      DeclaresAttribute_like: '%{binding} %{must} declare an attribute similar to %{target}'
      DeclaresAttribute_named: '%{binding} %{must} declare an attribute %{target}'
      DeclaresAttribute: '%{binding} %{must} declare attributes'
      DeclaresClass_except: '%{binding} %{must} declare classes distinct from %{target}'
      DeclaresClass_like: '%{binding} %{must} declare a class similar to %{target}'
      DeclaresClass_named: '%{binding} %{must} declare a class %{target}'
      DeclaresClass: '%{binding} %{must} declare classes'
      DeclaresComputation_except: '%{binding} %{must} declare computations distinct from %{target}'
      DeclaresComputation_like: '%{binding} %{must} declare a computation similar to %{target}'
      DeclaresComputation_named: '%{binding} %{must} declare a computation %{target}'
      DeclaresComputation: '%{binding} %{must} declare computations'
      DeclaresComputationWithArity0_named: '%{target} %{must} have zero parameters'
      DeclaresComputationWithArity1_named: '%{target} %{must} have one parameter'
      DeclaresComputationWithArity2_named: '%{target} %{must} have 2 parameters'
      DeclaresComputationWithArity3_named: '%{target} %{must} have 3 parameters'
      DeclaresComputationWithArity4_named: '%{target} %{must} have 4 parameters'
      DeclaresComputationWithArity5_named: '%{target} %{must} have 5 parameters'
      DeclaresEntryPoint: '%{binding} %{must} declare an entry point'
      DeclaresEnumeration_except: '%{binding} %{must} declare enumerations distinct from %{target}'
      DeclaresEnumeration_like: '%{binding} %{must} declare an enumeration like %{target}'
      DeclaresEnumeration_named: '%{binding} %{must} declare an enumeration %{target}'
      DeclaresEnumeration: '%{binding} %{must} declare enumerations'
      DeclaresFact_except: '%{binding} %{must} declare facts distinct from %{target}'
      DeclaresFact_like: '%{binding} %{must} declare a fact similar to %{target}'
      DeclaresFact_named: '%{binding} %{must} declare a fact %{target}'
      DeclaresFact: '%{binding} %{must} declare facts'
      DeclaresFunction_except: '%{binding} %{must} declare functions distinct from %{target}'
      DeclaresFunction_like: '%{binding} %{must} declare a function similar to %{target}'
      DeclaresFunction_named: '%{binding} %{must} declare a function %{target}'
      DeclaresFunction: '%{binding} %{must} debe declare functions'
      DeclaresInterface_except: '%{binding} %{must} declare interfaces distinct from %{target}'
      DeclaresInterface_like: '%{binding} %{must} declare an interface like %{target}'
      DeclaresInterface_named: '%{binding} %{must} declare an interface %{target}'
      DeclaresInterface: '%{binding} %{must} declare interfaces'
      DeclaresMethod_except: '%{binding} %{must} declare methods distinct from %{target}'
      DeclaresMethod_like: '%{binding} %{must} declare a method similar to %{target}'
      DeclaresMethod_named: '%{binding} %{must} declare a method %{target}'
      DeclaresMethod: '%{binding} %{must} declare methods'
      DeclaresObject_except: '%{binding} %{must} declare objects distinct from %{target}'
      DeclaresObject_like: '%{binding} %{must} declare an object similar to %{target}'
      DeclaresObject_named: '%{binding} %{must} declare an object %{target}'
      DeclaresObject: '%{binding} %{must} declare objects'
      DeclaresPredicate_except: '%{binding} %{must} declare a predicate distinct from %{target}'
      DeclaresPredicate_like: '%{binding} %{must} declare a predicate similar to %{target}'
      DeclaresPredicate_named: '%{binding} %{must} declare predicates %{target}'
      DeclaresPredicate: '%{binding} %{must} declare predicates'
      DeclaresProcedure_except: '%{binding} %{must} declare procedures distinct from %{target}'
      DeclaresProcedure_like: '%{binding} %{must} declare a procedure similar to %{target}'
      DeclaresProcedure_named: '%{binding} %{must} declare a procedure %{target}'
      DeclaresProcedure: '%{binding} %{must} declare procedures'
      DeclaresRecursively_named: '%{target} %{must} declared recursively'
      DeclaresRule_except: '%{binding} %{must} declare rules distinct from %{target}'
      DeclaresRule_like: '%{binding} %{must} declare a rule similar to %{target}'
      DeclaresRule_named: '%{binding} %{must} declare a rule %{target}'
      DeclaresRule: '%{binding} %{must} debe declare rules'
      DeclaresStyles_except: '%{binding} %{must} declare style distinct from %{target}'
      DeclaresStyles_like: '%{binding} %{must} declare a style similar to %{target}'
      DeclaresStyles_named: '%{binding} %{must} declare a style %{target}'
      DeclaresStyles: '%{binding} %{must} declare styles'
      DeclaresTag_except: '%{binding} %{must} declare a tag distinct from %{target}'
      DeclaresTag_like: '%{binding} %{must} declare a tag similar to %{target}'
      DeclaresTag_named: '%{binding} %{must} declare a tag %{target}'
      DeclaresTag: '%{binding} %{must} declare a tag'
      DeclaresTypeAlias_except: '%{binding} %{must} declare type aliases distinct from %{target}'
      DeclaresTypeAlias_like: '%{binding} %{must} declare a type alias similar to %{target}'
      DeclaresTypeAlias_named: '%{binding} %{must} declare a type alias %{target}'
      DeclaresTypeAlias: '%{binding} %{must} declare type aliases'
      DeclaresTypeSignature_except: '%{binding} %{must} declare a type signature distinct from %{target}'
      DeclaresTypeSignature_like: '%{binding} %{must} declare a type signature for something like %{target}'
      DeclaresTypeSignature_named: '%{binding} %{must} declare a type signature %{target}'
      DeclaresTypeSignature: '%{binding} %{must} decarar type signatures'
      DeclaresVariable_except: '%{binding} %{must} declare variables distinct from %{target}'
      DeclaresVariable_like: '%{binding} %{must} declare a variable similar to %{target}'
      DeclaresVariable_named: '%{binding} %{must} declare a variable %{target}'
      DeclaresVariable: '%{binding} %{must} debe declare variables'
      DiscardsExceptions: '%{binding} is ignoring exceptions silently'
      DoesConsolePrint: '%{binding} is printing to the console'
      DoesNilTest: '%{binding} does <i>%{keyword_null}</i> tests'
      DoesNullTest: '%{binding} does <i>%{keyword_null}</i> tests'
      DoesTypeTest: '%{binding} string type tests'
      HasAssignmentReturn: '%{binding} returns the result of an assignment'
      HasCodeDuplication: '%{binding} has code duplication'
      HasEmptyIfBranches: '%{binding} has empty <i>%{keyword_if}</i> branches'
      HasMisspelledBindings: '%{binding} is misspelled'
      HasMisspelledIdentifiers: '%{binding} is misspelled'
      HasRedundantBooleanComparison: '%{binding} makes unnecesary boolean comparisons'
      HasRedundantGuards: '%{binding} has unnecessary guards'
      HasRedundantIf: '%{binding} has unnecessary <i>%{keyword_if}</i>s'
      HasRedundantLambda: '%{binding} has unnecessary lambdas'
      HasRedundantLocalVariableReturn: '%{binding} has unnecesary local variables; please try returning the expression directly'
      HasRedundantParameter: '%{binding} has unnecessary parameters, that can be removed using point-free'
      HasRedundantReduction: '%{binding} uses <i>%{keyword_is}</i>, but it does not artihmetic.'
      HasTooShortBindings: '%{binding} is a too short identifier'
      HasUnreachableCode: '%{binding} has unreachable code.'
      HasWrongCaseBindings: '%{binding} does not honor case conventions'
      Implements_except: '%{binding} %{must} implement interfaces distinct from %{target}'
      Implements_like: '%{binding} %{must} implement interfaces like %{target}'
      Implements_named: '%{binding} %{must} implement %{target}'
      Implements: '%{binding} %{must} implement intefaces'
      Includes_except: '%{binding} %{must} include mixins distinct from %{target}'
      Includes_like: '%{binding} %{must} include a mixin similar to %{target}'
      Includes_named: '%{binding} %{must} include the %{target} mixin'
      Includes: '%{binding} %{must} include mixins'
      Instantiates_except: '%{binding} %{must} instantiate classes distinct from %{target}'
      Instantiates_like: '%{binding} %{must} instantiate classes like %{target}'
      Instantiates_named: '%{binding} %{must} instantiate %{target}'
      Instantiates: '%{binding} %{must} instantiate objects'
      IsLongCode: '%{binding} is too long'
      Raises_except: '%{binding} %{must} throw exceptions distinct from %{target}'
      Raises_like: '%{binding} %{must} throw exceptions like %{target}'
      Raises_named: '%{binding} %{must} throw %{target}'
      Raises: '%{binding} %{must} throw exceptions'
      ReturnsNil: '%{binding} retuns <i>%{keyword_null}</i>, which is a bad practice'
      ReturnsNull: '%{binding} retuns <i>%{keyword_null}</i>, which is a bad practice'
      SourceContains_named: 'solution %{must} use %{target}'
      SourceEquals_named: 'solution %{must} be equal to %{target}'
      SourceEqualsIgnoreSpaces_named: 'solution %{must} be equal to %{target}'
      SourceRepeats_named: 'solution %{must} use %{target} more than one time'
      TypesAs_named: '%{binding} %{must} type as %{target}'
      TypesAs: '%{binding} %{must} type'
      TypesParameterAs_except: '%{binding} %{must} type parameters with a type distinct from %{target}'
      TypesParameterAs_like: '%{binding} %{must} type parameters with a type similar to %{target}'
      TypesParameterAs_named: '%{binding} %{must} type parameters with type %{target}'
      TypesParameterAs: '%{binding} %{must} type parameters'
      TypesReturnAs_named: '%{binding} %{must} type its return value as %{target}'
      TypesReturnAs: '%{binding} %{must} type its return value'
      Uses_except: '%{binding} %{must} delegate to something distinct from %{target}'
      Uses_like: '%{binding} %{must} delegate to something similar to %{target}'
      Uses_named: '%{binding} %{must} use %{target}'
      Uses: '%{binding} %{must} delegate'
      UsesAnonymousVariable: '%{binding} %{must} use an annonymous variable'
      UsesComposition: '%{binding} %{must} use composition'
      UsesComprehension: '%{binding} %{must} use comprehensions'
      UsesConditional: '%{binding} %{must} use conditionals'
      UsesCut: '%{binding} uses <i>!</li> operator, which is a bad practice'
      UsesDyamicPolymorphism: '%{binding} %{must} use polymorphism'
      UsesDynamicMethodOverload: '%{binding} %{must} use overload'
      UsesFail: '%{binding} uses <i>%{keyword_fail}</li>, which is a bad practice'
      UsesFindall: '%{binding} %{must} use <i>%{keyword_findall}</i>'
      UsesForall: '%{binding} %{must} use <i>%{keyword_forall}</i>'
      UsesForeach: '%{binding} %{must} use <i>%{keyword_foreach}</i>'
      UsesGuards: '%{binding} %{must} use guards'
      UsesIf: '%{binding} %{must} use <i>%{keyword_if}</i>'
      UsesLambda: '%{binding} %{must} use lambda expressions'
      UsesLoop: '%{binding} %{must} use a loop'
      UsesMixin: '%{binding} %{must} use mixins'
      UsesNot: '%{binding} %{must} use not'
      UsesObjectComposition: '%{binding} %{must} use composition'
      UsesPatternMatching: '%{binding} %{must} use pattern matching'
      UsesRepeat: '%{binding} %{must} use <i>%{keyword_repeat}</i>'
      UsesRepeatOf: '%{binding} %{must} use <i>%{keyword_repeat}</i>'
      UsesStaticMethodOverload: '%{binding} %{must} use overload'
      UsesStaticPolymorphism: '%{binding} %{must} use polymorphism'
      UsesSwitch: '%{binding} %{must} use a <i>%{keyword_switch}</i>'
      UsesTemplateMethod: '%{binding} %{must} use a template method'
      UsesUnificationOperator: '%{binding} uses the unification operator (=)'
      UsesWhile: '%{binding} %{must} use <i>%{keyword_while}</i>'
