---
en:
  expectation_DoesTypeTest: '%{binding} has redundant string comparisons'
  expectation_HasArity: '%{binding} %{must} have %{target} parameters'
  expectation_HasBinding: '%{binding} %{must} be defined'
  expectation_HasComposition: '%{binding} %{must} use composition'
  expectation_HasComprehension: '%{binding} %{must} use list comprehensions'
  expectation_HasConditional: '%{binding} %{must} use conditionals'
  expectation_HasDirectRecursion: '%{binding} %{must} use recursion'
  expectation_HasForeach: '%{binding} %{must} use an indexed repetition (<i>foreach</i> statement)'
  expectation_HasGuards: '%{binding} %{must} use guards'
  expectation_HasIf: '%{binding} %{must} use if'
  expectation_HasLambda: '%{binding} %{must} use lambda expressions'
  expectation_HasRedundantBooleanComparison: '%{binding} has redundant boolean comparisons'
  expectation_HasRedundantGuards: '%{binding} has redundant guards'
  expectation_HasRedundantIf: '%{binding} has redundant ifs'
  expectation_HasRedundantLambda: '%{binding} has redundant lambdas'
  expectation_HasRedundantParameter: '%{binding} has redundant parameters - you may avoid them using point-free'
  expectation_HasRepeat: '%{binding} %{must} use a simple repetition (<i>repeat</i> statement)'
  expectation_HasRepeatOf: '%{binding} %{must} use a simple repetition (<i>repeat</i> sentence) of %{target}'
  expectation_HasTypeDeclaration: type %{binding} %{must} be defined
  expectation_HasTypeSignature: Signature for %{binding} %{must} be declared
  expectation_HasUsage: '%{binding} %{must} use %{target}'
  expectation_HasVariable: '%{binding} %{must} use variables'
  expectation_HasWhile: '%{binding} %{must} use conditional repetition (<i>while</i> statement)'
  expectation_must: must
  expectation_must_not: must not
