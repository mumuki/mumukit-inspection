---
en:
  expectation_DoesTypeTest: '%{binding} has redundant string comparisons'
  expectation_HasAnonymousVariable: '%{binding} %{must} use annoymous variable'
  expectation_HasArity0: '%{binding} %{must} have zero parámeters'
  expectation_HasArity1: '%{binding} %{must} have one parameter'
  expectation_HasArity2: '%{binding} %{must} have two parameters'
  expectation_HasArity3: '%{binding} %{must} have three parameres'
  expectation_HasArity: '%{binding} %{must} have %{target} parameters'
  expectation_HasAttribute: 'attribute %{binding} %{must} be declared'
  expectation_HasAttribute_named: '%{binding} %{must} declare attribute %{target}'
  expectation_HasBinding: '%{binding} %{must} be defined'
  expectation_HasBinding_named: '%{binding} %{must} declarar %{target}'
  expectation_HasClass: 'la clase %{binding} %{must} estar declarada'
  expectation_HasClass_named: '%{binding} %{must} declarar una clase %{target}'
  expectation_HasComposition: '%{binding} %{must} use composition'
  expectation_HasComprehension: '%{binding} %{must} use list comprehensions'
  expectation_HasComputation: '%{binding} %{must} estar declarado'
  expectation_HasComputation_named: '%{binding} %{must} declarar %{target}'
  expectation_HasConditional: '%{binding} %{must} use conditionals'
  expectation_HasDirectRecursion: '%{binding} %{must} use recursion'
  expectation_HasEntryPoint: '%{binding} %{must} declarar un punto de entrada'
  expectation_HasFact: 'el hecho %{binding} %{must} estar declarado'
  expectation_HasFact_named: '%{binding} %{must} declarar un hecho %{target}'
  expectation_HasFindall: '%{binding} %{must} utilizar findall'
  expectation_HasForall: '%{binding} %{must} utilizar forall'
  expectation_HasForeach: '%{binding} %{must} use an indexed repetition (<i>foreach</i> statement)'
  expectation_HasFunction: 'la función %{binding} %{must} estar declarada'
  expectation_HasFunction_named: '%{binding} %{must} declarar una función %{target}'
  expectation_HasGuards: '%{binding} %{must} usar guardas'
  expectation_HasGuards: '%{binding} %{must} use guards'
  expectation_HasIf: '%{binding} %{must} usar if'
  expectation_HasIf: '%{binding} %{must} use if'
  expectation_HasLambda: '%{binding} %{must} use lambda expressions'
  expectation_HasMethod: 'el método %{binding} %{must} estar declarado'
  expectation_HasMethod_named: '%{binding} %{must} declarar un método %{target}'
  expectation_HasNot: '%{binding} %{must} utilizar not'
  expectation_HasObject: 'el objeto %{binding} %{must} estar declarado'
  expectation_HasObject_named: '%{binding} %{must} declarar un objeto %{target}'
  expectation_HasPatternMatching: '%{binding} %{must} utilizar pattern matching'
  expectation_HasPredicate: 'el predicado %{binding} %{must} estar declarado'
  expectation_HasProcedure: 'el procedimiento %{binding} %{must} estar declarado'
  expectation_HasProcedure_named: '%{binding} %{must} declarar un procedimiento %{target}'
  expectation_HasRedundantBooleanComparison: '%{binding} hace comparaciones booleanas innecesarias'
  expectation_HasRedundantBooleanComparison: '%{binding} has redundant boolean comparisons'
  expectation_HasRedundantGuards: '%{binding} has redundant guards'
  expectation_HasRedundantIf: '%{binding} has redundant ifs'
  expectation_HasRedundantLambda: '%{binding} has redundant lambdas'
  expectation_HasRedundantParameter: '%{binding} has redundant parameters - you may avoid them using point-free'
  expectation_HasRepeat: '%{binding} %{must} use a simple repetition (<i>repeat</i> statement)'
  expectation_HasRepeatOf: '%{binding} %{must} usar una repetición simple (sentencia <i>repeat</i>) de %{target}'
  expectation_HasRepeatOf: '%{binding} %{must} use a simple repetition (<i>repeat</i> sentence) of %{target}'
  expectation_HasRule: 'la regla %{binding} %{must} estar declarada'
  expectation_HasRule_named: '%{binding} %{must} declarar una regla %{target}'
  expectation_HasSwitch: '%{binding} %{must} utilizar un switch'
  expectation_HasTypeAlias: 'el sinónimo de tipo %{binding} %{must} debe estar declarado'
  expectation_HasTypeAlias_named: '%{binding} %{must} declarar un sinónimo de tipo %{target}'
  expectation_HasTypeDeclaration: type %{binding} %{must} be defined
  expectation_HasTypeSignature: Signature for %{binding} %{must} be declared
  expectation_HasTypeSignature_named: '%{binding} %{must} declarar una firma %{}'
  expectation_HasUnifyOperator: '%{binding} %{must} utilizar el operador de unificación (=)'
  expectation_HasUsage: '%{binding} %{must} use %{target}'
  expectation_HasUsage_named: '%{binding} %{must} use %{target}'
  expectation_HasVariable: '%{binding} %{must} use variables'
  expectation_HasVariable_named: '%{binding} %{must} declarar una variable %{target}'
  expectation_HasWhile: '%{binding} %{must} utilizar repetición condicional (sentencia <i>while</i>)'
  expectation_must: must
  expectation_must_not: must not
