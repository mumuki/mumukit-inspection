---
es:
  expectation_DoesTypeTest: '%{binding} hace comparaciones de strings innecesarias'
  expectation_HasArity: '%{binding} %{must} tener %{target} parámetros'
  expectation_HasBinding: '%{binding} %{must} estar definido'
  expectation_HasComposition: '%{binding} %{must} usar composición'
  expectation_HasComprehension: '%{binding} %{must} emplear listas por comprensión'
  expectation_HasConditional: '%{binding} %{must} utilizar condicionales (guardas/if)'
  expectation_HasDirectRecursion: '%{binding} %{must} emplear recursión'
  expectation_HasForeach: '%{binding} %{must} usar una repetición indexada (sentencia <i>foreach</i>)'
  expectation_HasGuards: '%{binding} %{must} usar guardas'
  expectation_HasIf: '%{binding} %{must} usar if'
  expectation_HasLambda: '%{binding} %{must} emplear expresiones lambda'
  expectation_HasRedundantBooleanComparison: '%{binding} hace comparaciones booleanas innecesarias'
  expectation_HasRedundantGuards: '%{binding} tiene guardas innecesarias'
  expectation_HasRedundantIf: '%{binding} tiene ifs innecesarios'
  expectation_HasRedundantLambda: '%{binding} tiene lambdas innecesarias'
  expectation_HasRedundantParameter: '%{binding} tiene parámetros innecesarios (se pueden eliminar mediante point-free)'
  expectation_HasRepeat: '%{binding} %{must} usar una repetición simple (sentencia <i>repeat</i>)'
  expectation_HasRepeatOf: '%{binding} %{must} usar una repetición simple (sentencia <i>repeat</i>) de %{target}'
  expectation_HasTypeDeclaration: '%{must} existir una declaración para el sinónimo de tipo %{binding}'
  expectation_HasTypeSignature: La firma para %{binding} %{must} ser declarada
  expectation_HasUsage: '%{binding} %{must} utilizar %{target}'
  expectation_HasVariable: '%{binding} %{must} utilizar variables'
  expectation_HasWhile: '%{binding} %{must} utilizar repetición condicional (sentencia <i>while</i>)'
  expectation_must: debe
  expectation_must_not: no debe
